<?php
// config.php - C·∫•u h√¨nh c∆° s·ªü d·ªØ li·ªáu v√† constants (FIXED)

class Database {
    private $host = 'localhost';
    private $dbname = 'football_league';
    private $username = 'root';
    private $password = '';
    private $pdo;
    
    public function __construct() {
        try {
            $this->pdo = new PDO(
                "mysql:host={$this->host};dbname={$this->dbname};charset=utf8mb4",
                $this->username,
                $this->password,
                [
                    PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION,
                    PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC,
                    PDO::ATTR_EMULATE_PREPARES => false
                ]
            );
        } catch (PDOException $e) {
            die("L·ªói k·∫øt n·ªëi database: " . $e->getMessage());
        }
    }
    
    public function getConnection() {
        return $this->pdo;
    }
}

// Singleton pattern cho database
class DB {
    private static $instance = null;
    private static $pdo = null;
    
    public static function getInstance() {
        if (self::$instance === null) {
            self::$instance = new Database();
            self::$pdo = self::$instance->getConnection();
        }
        return self::$pdo;
    }
}

// Constants
define('LOCK_TIME', '23:59:59');
define('MATCH_START_TIME', '00:00:01');
define('MIN_PLAYERS', 4);

// ƒêI·ªÇM S·ªê CHO C·∫¶U TH·ª¶ TH∆Ø·ªúNG - S·ª¨ D·ª§NG FLOAT ƒê·ªÇ T√çNH TO√ÅN CH√çNH X√ÅC
define('POINTS_WIN', 3.0);
define('POINTS_DRAW', 1.0);
define('POINTS_LOSE', 0.0);

// ƒêI·ªÇM S·ªê CHO C·∫¶U TH·ª¶ ƒê·∫∂C BI·ªÜT - S·ª¨ D·ª§NG FLOAT
define('SPECIAL_POINTS_WIN', 4.5);   // 3.0 x 1.5 = 4.5
define('SPECIAL_POINTS_DRAW', 1.5);  // 1.0 x 1.5 = 1.5
define('SPECIAL_POINTS_LOSE', 0.0);  // 0.0 x 1.5 = 0.0

// Test mode
define('TEST_MODE', true);
define('EDIT_MODE', true);

// Timezone
date_default_timezone_set('Asia/Ho_Chi_Minh');

// Helper functions
function getCurrentDate() {
    return date('Y-m-d');
}

function getCurrentTime() {
    return date('H:i:s');
}

function getCurrentDateTime() {
    return date('Y-m-d H:i:s');
}

function isRegistrationLocked($date = null) {
    return false;
}

function canUpdateMatchResult($matchDate) {
    if (defined('TEST_MODE') && TEST_MODE) {
        return true;
    }
    
    $currentDate = getCurrentDate();
    $currentTime = getCurrentTime();
    
    if ($currentDate > $matchDate) {
        return true;
    }
    
    if ($currentDate === $matchDate && $currentTime >= MATCH_START_TIME) {
        return true;
    }
    
    return false;
}

function formatPosition($position) {
    $positions = [
        'Th·ªß m√¥n' => 'ü•Ö',
        'Trung v·ªá' => 'üõ°Ô∏è', 
        'H·∫≠u v·ªá c√°nh' => '‚ö°',
        'Ti·ªÅn v·ªá' => '‚öΩ',
        'Ti·ªÅn ƒë·∫°o' => 'üéØ'
    ];
    
    return ($positions[$position] ?? '') . ' ' . $position;
}

function formatSkill($skill) {
    $colors = [
        'T·ªët' => 'success',
        'Trung b√¨nh' => 'warning', 
        'Y·∫øu' => 'secondary'
    ];
    
    return [
        'text' => $skill,
        'color' => $colors[$skill] ?? 'secondary'
    ];
}

// Response helper
function jsonResponse($data, $status = 200) {
    http_response_code($status);
    header('Content-Type: application/json; charset=utf-8');
    echo json_encode($data, JSON_UNESCAPED_UNICODE);
    exit;
}

function errorResponse($message, $status = 400) {
    jsonResponse(['error' => $message], $status);
}

function successResponse($message, $data = null) {
    $response = ['success' => $message];
    if ($data !== null) {
        $response['data'] = $data;
    }
    jsonResponse($response);
}

/**
 * T√≠nh ƒëi·ªÉm s·ªë d·ª±a tr√™n lo·∫°i c·∫ßu th·ªß v√† k·∫øt qu·∫£ tr·∫≠n ƒë·∫•u - FIXED
 * Tr·∫£ v·ªÅ s·ªë th·∫≠p ph√¢n ch√≠nh x√°c
 */
function calculatePoints($isWin, $isDraw, $isSpecialPlayer) {
    // ƒê·∫£m b·∫£o t√≠nh to√°n v·ªõi float ƒë·ªÉ tr√°nh l√†m tr√≤n
    if ($isSpecialPlayer) {
        if ($isWin) return (float) SPECIAL_POINTS_WIN;      // 4.5
        if ($isDraw) return (float) SPECIAL_POINTS_DRAW;    // 1.5
        return (float) SPECIAL_POINTS_LOSE;                 // 0.0
    } else {
        if ($isWin) return (float) POINTS_WIN;              // 3.0
        if ($isDraw) return (float) POINTS_DRAW;            // 1.0
        return (float) POINTS_LOSE;                         // 0.0
    }
}

/**
 * T√≠nh s·ªë tr·∫≠n thua
 */
function calculateLosses($totalMatches, $wins, $draws) {
    return max(0, $totalMatches - $wins - $draws);
}

/**
 * Format th·ªëng k√™ th·∫Øng-h√≤a-thua
 */
function formatWinDrawLoss($wins, $draws, $losses) {
    return "{$wins}-{$draws}-{$losses}";
}

/**
 * T√≠nh t·ª∑ l·ªá th·∫Øng ph·∫ßn trƒÉm
 */
function calculateWinRate($wins, $totalMatches) {
    if ($totalMatches == 0) return 0;
    return round(($wins / $totalMatches) * 100, 1);
}

/**
 * Format hi·ªÉn th·ªã c·∫ßu th·ªß ƒë·∫∑c bi·ªát
 */
function formatSpecialPlayer($isSpecial) {
    return $isSpecial ? '‚≠ê ƒê·∫∑c bi·ªát' : 'Th∆∞·ªùng';
}

/**
 * Get special player badge class
 */
function getSpecialPlayerBadgeClass($isSpecial) {
    return $isSpecial ? 'bg-warning text-dark' : 'bg-secondary';
}

/**
 * Format ƒëi·ªÉm s·ªë hi·ªÉn th·ªã - TH√äM M·ªöI
 * Hi·ªÉn th·ªã s·ªë th·∫≠p ph√¢n n·∫øu c·∫ßn, nguy√™n n·∫øu kh√¥ng c·∫ßn
 */
function formatPoints($points) {
    $points = (float) $points;
    
    // N·∫øu l√† s·ªë nguy√™n, hi·ªÉn th·ªã kh√¥ng c√≥ th·∫≠p ph√¢n
    if ($points == intval($points)) {
        return number_format($points, 0);
    }
    
    // N·∫øu c√≥ th·∫≠p ph√¢n, hi·ªÉn th·ªã 1 ch·ªØ s·ªë th·∫≠p ph√¢n
    return number_format($points, 1);
}

/**
 * Validate ƒëi·ªÉm s·ªë - TH√äM M·ªöI
 * ƒê·∫£m b·∫£o ƒëi·ªÉm ƒë∆∞·ª£c t√≠nh ch√≠nh x√°c
 */
function validatePoints($points, $isSpecialPlayer, $matchResult) {
    $expectedPoints = calculatePoints(
        $matchResult['isWin'], 
        $matchResult['isDraw'], 
        $isSpecialPlayer
    );
    
    return abs($points - $expectedPoints) < 0.01; // Cho ph√©p sai s·ªë nh·ªè
}
?>